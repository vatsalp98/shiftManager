type User @model @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create, update] },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
    id: ID!
    given_name: String!
    last_name: String!
    email: String!
    employeeId: String
    roles: [String]
    regionId: ID!
    region: Region @hasOne(fields: ["regionId"])
}

type Shift @model @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create, update] },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
    id: ID!
    date: AWSDate!
    startTime: AWSTime!
    endTime: AWSTime!
    isCancelled: Boolean!
    isRemote: Boolean!
    isNoShow: Boolean!
    maxSlots: Int!
    waitingQueue: Int!
    shiftType: String!
    regionId: ID!
    region: Region @hasOne(fields: ["regionId"])
}

type ShiftUser @model @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create, update] },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
    id: ID!
    userId: ID!
    shiftId: ID!
    user: User @hasOne(fields: ["userId"])
    shift: Shift @hasOne(fields: ["shiftId"])
}

type AvailabilityUser @model @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create, update] },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
    id: ID!
    date: AWSDate!
    startTime: AWSTime!
    endTime: AWSTime!
    userId: ID!
    user: User @hasOne(fields: ["userId"])
}

type Region @model @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read] },
    { allow: private, operations: [read, create, update, delete] }
  ]) {
  id: ID!
  province: String!
  city: String!
  centerId: String
}

type Query {
  getUserCount:Int @aws_api_key @aws_cognito_user_pools @function(name:"shiftmanagerusercount-dev")
}